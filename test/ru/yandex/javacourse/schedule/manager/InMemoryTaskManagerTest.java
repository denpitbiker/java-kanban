package ru.yandex.javacourse.schedule.manager;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import ru.yandex.javacourse.schedule.tasks.Epic;
import ru.yandex.javacourse.schedule.tasks.Subtask;
import ru.yandex.javacourse.schedule.tasks.Task;
import ru.yandex.javacourse.schedule.tasks.TaskStatus;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class InMemoryTaskManagerTest {

    TaskManager manager;

    @BeforeEach
    public void initManager() {
        manager = Managers.getDefault();
    }

    @Test
    public void testAddTask() {
        Task task = new Task("Test 1", "Testing task 1", TaskStatus.NEW);
        manager.addNewTask(task);
        assertEquals(1, manager.getTasks().size(), "task should be added");
        Task addedTask = manager.getTasks().getFirst();
        assertEquals(task, addedTask, "added task id should be set");
        Task byIdTask = manager.getTask(task.getId());
        assertEquals(task, byIdTask, "added task id should be found");
    }

    @Test
    public void testAddTaskWithId() {
        Task task = new Task(42, "Test 1", "Testing task 1", TaskStatus.NEW);
        manager.addNewTask(task);
        assertEquals(1, manager.getTasks().size(), "task should be added");
        Task addedTask = manager.getTasks().getFirst();
        assertEquals(task, addedTask, "predefined task id should be set");
    }

    @Test
    public void testAddTaskWithAndWithoutId() {
        Task task0 = new Task("Test 1", "Testing task 1", TaskStatus.NEW);
        Task task1 = new Task(2, "Test 2", "Testing task 2", TaskStatus.NEW);
        manager.addNewTask(task0);
        manager.addNewTask(task1);
        assertEquals(2, manager.getTasks().size(), "lost a task with predefined id");
        assertEquals(1, task0.getId(), "autogenerated id should be 1");
        assertEquals(2, task1.getId(), "task predefined id should not change");
    }

    @Test
    public void checkTaskNotChangedAfterAddTask() {
        int id = 1;
        String name = "Test 1";
        String description = "Testing task 1";
        TaskStatus status = TaskStatus.NEW;
        Task task1before = new Task(id, name, description, status);
        manager.addNewTask(task1before);
        Task task1after = manager.getTask(task1before.getId());
        assertEquals(id, task1after.getId());
        assertEquals(description, task1after.getDescription());
        assertEquals(status, task1after.getStatus());
        assertEquals(name, task1after.getName());
    }

    @Test
    public void testOldIdSubtaskInEpic() {
        Subtask subtask = new Subtask(1, "Test 1", "Testing task 1", TaskStatus.NEW, 2);
        Subtask subtask2 = new Subtask(3, "Test 3", "Testing task 3", TaskStatus.NEW, 2);
        Epic epic = new Epic(2, "Epic", "Testing epic 2");
        manager.addNewEpic(epic);
        int subtaskId = manager.addNewSubtask(subtask);
        assertEquals(1, subtaskId, "predefined id must be equal");
        manager.addNewSubtask(subtask2);
        manager.deleteSubtask(subtask.getId());
        epic = manager.getEpic(epic.getId());
        assertEquals(1, epic.getSubtaskIds().size(), "must be only one id");
        assertEquals(3, epic.getSubtaskIds().getFirst(), "must be subtask with id 3");
    }
}
